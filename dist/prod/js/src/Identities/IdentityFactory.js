"use strict";
var Identity_1 = require('./Identity');
var IdentityFactory = (function () {
    function IdentityFactory() {
    }
    IdentityFactory.isIIdentity = function (valor) {
        return valor.Claims !== undefined;
    };
    IdentityFactory.Create = function (userOrUserType, tokens) {
        tokens = tokens instanceof Array ? tokens : [tokens];
        var keyValuePairArray = IdentityFactory.GenerateKeyValuePair(tokens);
        var identity = null;
        if (userOrUserType == null) {
            identity = new Identity_1.Identity(keyValuePairArray);
        }
        else {
            if (IdentityFactory.isIIdentity(userOrUserType)) {
                identity = userOrUserType;
            }
            else {
                identity = new userOrUserType(keyValuePairArray);
            }
        }
        keyValuePairArray.forEach(function (keyValuePair) {
            identity.Claims.push(keyValuePair);
        });
        return identity;
    };
    IdentityFactory.GenerateKeyValuePair = function (tokens) {
        tokens = tokens instanceof Array ? tokens : [tokens];
        var keyValuePairArray = new Array();
        tokens.forEach(function (token) {
            for (var chave in token) {
                if (token.hasOwnProperty(chave)) {
                    var valor = token[chave];
                    var novoItem = {
                        key: chave,
                        value: valor
                    };
                    if (token instanceof Array) {
                        keyValuePairArray.push(valor);
                    }
                    else {
                        keyValuePairArray.push(novoItem);
                    }
                }
            }
        });
        return keyValuePairArray;
    };
    return IdentityFactory;
}());
exports.IdentityFactory = IdentityFactory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklkZW50aXRpZXMvSWRlbnRpdHlGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx5QkFBdUIsWUFBWSxDQUFDLENBQUE7QUFJcEM7SUFBQTtJQXlFQSxDQUFDO0lBdEVrQiwyQkFBVyxHQUExQixVQUFnRCxLQUF3RTtRQUVwSCxNQUFNLENBQWEsS0FBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUM7SUFDbkQsQ0FBQztJQUVhLHNCQUFNLEdBQXBCLFVBQTBDLGNBQTBFLEVBQUUsTUFBYztRQUVoSSxNQUFNLEdBQUcsTUFBTSxZQUFZLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyRCxJQUFJLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUdyRSxJQUFJLFFBQVEsR0FBYyxJQUFJLENBQUM7UUFDL0IsRUFBRSxDQUFBLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxDQUMxQixDQUFDO1lBQ0csUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFDRCxJQUFJLENBQ0osQ0FBQztZQUNHLEVBQUUsQ0FBQSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FDL0MsQ0FBQztnQkFDRyxRQUFRLEdBQUcsY0FBYyxDQUFDO1lBQzlCLENBQUM7WUFDRCxJQUFJLENBQ0osQ0FBQztnQkFDRyxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNyRCxDQUFDO1FBQ0wsQ0FBQztRQUVELGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVk7WUFFbkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUksUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFYyxvQ0FBb0IsR0FBbkMsVUFBb0MsTUFBYTtRQUU3QyxNQUFNLEdBQUcsTUFBTSxZQUFZLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUdyRCxJQUFJLGlCQUFpQixHQUFrQyxJQUFJLEtBQUssRUFBMEIsQ0FBQztRQUUzRixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztZQUVqQixHQUFHLENBQUEsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FDdkIsQ0FBQztnQkFDRyxFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQy9CLENBQUM7b0JBQ0csSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN6QixJQUFJLFFBQVEsR0FBRzt3QkFDWCxHQUFHLEVBQUcsS0FBSzt3QkFDWCxLQUFLLEVBQUcsS0FBSztxQkFDaEIsQ0FBQztvQkFFRixFQUFFLENBQUEsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQzFCLENBQUM7d0JBQ0csaUJBQWlCLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDO29CQUNwQyxDQUFDO29CQUNELElBQUksQ0FDSixDQUFDO3dCQUNHLGlCQUFpQixDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsQ0FBQztvQkFDdkMsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBQzdCLENBQUM7SUFDTCxzQkFBQztBQUFELENBekVBLEFBeUVDLElBQUE7QUF6RXFCLHVCQUFlLGtCQXlFcEMsQ0FBQSIsImZpbGUiOiJJZGVudGl0aWVzL0lkZW50aXR5RmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SUlkZW50aXR5fSBmcm9tICcuL0lJZGVudGl0eSc7XHJcbmltcG9ydCB7SWRlbnRpdHl9IGZyb20gJy4vSWRlbnRpdHknO1xyXG5cclxuLy9leHBvcnQgZGVmYXVsdCBJZGVudGl0eUZhY3Rvcnk7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWRlbnRpdHlGYWN0b3J5XHJcbntcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNJSWRlbnRpdHk8VCBleHRlbmRzIElJZGVudGl0eT4odmFsb3I6IElJZGVudGl0eSB8IHsgbmV3KENsYWltczpBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogYW55IH0+KTogVCB9KTogdmFsb3IgaXMgSUlkZW50aXR5IFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiAoPElJZGVudGl0eT52YWxvcikuQ2xhaW1zICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBDcmVhdGU8VCBleHRlbmRzIElJZGVudGl0eT4odXNlck9yVXNlclR5cGU/IDpUIHwgeyBuZXcoQ2xhaW1zOkFycmF5PHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkgfT4pOiBUIH0sIHRva2Vucz8gOmFueVtdKTpUXHJcbiAgICB7XHJcbiAgICAgICAgdG9rZW5zID0gdG9rZW5zIGluc3RhbmNlb2YgQXJyYXkgPyB0b2tlbnMgOiBbdG9rZW5zXTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQga2V5VmFsdWVQYWlyQXJyYXkgPSBJZGVudGl0eUZhY3RvcnkuR2VuZXJhdGVLZXlWYWx1ZVBhaXIodG9rZW5zKTsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGlkZW50aXR5IDpJSWRlbnRpdHkgPSBudWxsO1xyXG4gICAgICAgIGlmKHVzZXJPclVzZXJUeXBlID09IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZGVudGl0eSA9IG5ldyBJZGVudGl0eShrZXlWYWx1ZVBhaXJBcnJheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKElkZW50aXR5RmFjdG9yeS5pc0lJZGVudGl0eSh1c2VyT3JVc2VyVHlwZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkZW50aXR5ID0gdXNlck9yVXNlclR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eSA9IG5ldyB1c2VyT3JVc2VyVHlwZShrZXlWYWx1ZVBhaXJBcnJheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAga2V5VmFsdWVQYWlyQXJyYXkuZm9yRWFjaCgoa2V5VmFsdWVQYWlyKSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWRlbnRpdHkuQ2xhaW1zLnB1c2goa2V5VmFsdWVQYWlyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxUPmlkZW50aXR5O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcml2YXRlIHN0YXRpYyBHZW5lcmF0ZUtleVZhbHVlUGFpcih0b2tlbnMgOmFueVtdKTpBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogYW55IH0+XHJcbiAgICB7XHJcbiAgICAgICAgdG9rZW5zID0gdG9rZW5zIGluc3RhbmNlb2YgQXJyYXkgPyB0b2tlbnMgOiBbdG9rZW5zXTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGtleVZhbHVlUGFpckFycmF5IDpBcnJheTx7a2V5OnN0cmluZyx2YWx1ZTphbnl9PiA9IG5ldyBBcnJheTx7a2V5OnN0cmluZyx2YWx1ZTphbnl9PigpOyBcclxuICAgICAgICBcclxuICAgICAgICB0b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGNoYXZlIGluIHRva2VuKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0b2tlbi5oYXNPd25Qcm9wZXJ0eShjaGF2ZSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbG9yID0gdG9rZW5bY2hhdmVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBub3ZvSXRlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5IDogY2hhdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIDogdmFsb3JcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRva2VuIGluc3RhbmNlb2YgQXJyYXkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlWYWx1ZVBhaXJBcnJheS5wdXNoKCB2YWxvciApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlWYWx1ZVBhaXJBcnJheS5wdXNoKCBub3ZvSXRlbSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4ga2V5VmFsdWVQYWlyQXJyYXk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==
