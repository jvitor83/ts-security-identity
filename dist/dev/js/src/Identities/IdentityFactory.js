"use strict";
var Identity_1 = require('./Identity');
var IdentityFactory = (function () {
    function IdentityFactory() {
    }
    IdentityFactory.isIIdentity = function (valor) {
        return valor.Claims !== undefined;
    };
    IdentityFactory.Create = function (userOrUserType, tokens) {
        tokens = tokens instanceof Array ? tokens : [tokens];
        var keyValuePairArray = IdentityFactory.GenerateKeyValuePair(tokens);
        var identity = null;
        if (userOrUserType == null) {
            identity = new Identity_1.Identity(keyValuePairArray);
        }
        else {
            if (IdentityFactory.isIIdentity(userOrUserType)) {
                identity = userOrUserType;
            }
            else {
                identity = new userOrUserType(keyValuePairArray);
            }
        }
        keyValuePairArray.forEach(function (keyValuePair) {
            identity.Claims.push(keyValuePair);
        });
        return identity;
    };
    IdentityFactory.GenerateKeyValuePair = function (tokens) {
        tokens = tokens instanceof Array ? tokens : [tokens];
        var keyValuePairArray = new Array();
        tokens.forEach(function (token) {
            for (var chave in token) {
                if (token.hasOwnProperty(chave)) {
                    var valor = token[chave];
                    var novoItem = {
                        key: chave,
                        value: valor
                    };
                    if (token instanceof Array) {
                        keyValuePairArray.push(valor);
                    }
                    else {
                        keyValuePairArray.push(novoItem);
                    }
                }
            }
        });
        return keyValuePairArray;
    };
    return IdentityFactory;
}());
exports.IdentityFactory = IdentityFactory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9JZGVudGl0aWVzL0lkZW50aXR5RmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EseUJBQXVCLFlBQVksQ0FBQyxDQUFBO0FBR3BDO0lBQUE7SUF3RUEsQ0FBQztJQXRFa0IsMkJBQVcsR0FBMUIsVUFBZ0QsS0FBd0U7UUFFcEgsTUFBTSxDQUFhLEtBQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFFYSxzQkFBTSxHQUFwQixVQUEwQyxjQUEwRSxFQUFFLE1BQWM7UUFFaEksTUFBTSxHQUFHLE1BQU0sWUFBWSxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckQsSUFBSSxpQkFBaUIsR0FBRyxlQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFHckUsSUFBSSxRQUFRLEdBQWMsSUFBSSxDQUFDO1FBQy9CLEVBQUUsQ0FBQSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FDMUIsQ0FBQztZQUNHLFFBQVEsR0FBRyxJQUFJLG1CQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBQ0QsSUFBSSxDQUNKLENBQUM7WUFDRyxFQUFFLENBQUEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQy9DLENBQUM7Z0JBQ0csUUFBUSxHQUFHLGNBQWMsQ0FBQztZQUM5QixDQUFDO1lBQ0QsSUFBSSxDQUNKLENBQUM7Z0JBQ0csUUFBUSxHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDckQsQ0FBQztRQUNMLENBQUM7UUFFRCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxZQUFZO1lBRW5DLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFJLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRWMsb0NBQW9CLEdBQW5DLFVBQW9DLE1BQWE7UUFFN0MsTUFBTSxHQUFHLE1BQU0sWUFBWSxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFHckQsSUFBSSxpQkFBaUIsR0FBa0MsSUFBSSxLQUFLLEVBQTBCLENBQUM7UUFFM0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUs7WUFFakIsR0FBRyxDQUFBLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLENBQ3ZCLENBQUM7Z0JBQ0csRUFBRSxDQUFBLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUMvQixDQUFDO29CQUNHLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDekIsSUFBSSxRQUFRLEdBQUc7d0JBQ1gsR0FBRyxFQUFHLEtBQUs7d0JBQ1gsS0FBSyxFQUFHLEtBQUs7cUJBQ2hCLENBQUM7b0JBRUYsRUFBRSxDQUFBLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUMxQixDQUFDO3dCQUNHLGlCQUFpQixDQUFDLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQztvQkFDcEMsQ0FBQztvQkFDRCxJQUFJLENBQ0osQ0FBQzt3QkFDRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFFLENBQUM7b0JBQ3ZDLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQXhFQSxBQXdFQyxJQUFBO0FBeEVxQix1QkFBZSxrQkF3RXBDLENBQUEiLCJmaWxlIjoic3JjL0lkZW50aXRpZXMvSWRlbnRpdHlGYWN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJSWRlbnRpdHl9IGZyb20gJy4vSUlkZW50aXR5JztcclxuaW1wb3J0IHtJZGVudGl0eX0gZnJvbSAnLi9JZGVudGl0eSc7XHJcblxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElkZW50aXR5RmFjdG9yeVxyXG57XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpc0lJZGVudGl0eTxUIGV4dGVuZHMgSUlkZW50aXR5Pih2YWxvcjogSUlkZW50aXR5IHwgeyBuZXcoQ2xhaW1zOkFycmF5PHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkgfT4pOiBUIH0pOiB2YWxvciBpcyBJSWRlbnRpdHkgXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuICg8SUlkZW50aXR5PnZhbG9yKS5DbGFpbXMgIT09IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIENyZWF0ZTxUIGV4dGVuZHMgSUlkZW50aXR5Pih1c2VyT3JVc2VyVHlwZT8gOlQgfCB7IG5ldyhDbGFpbXM6QXJyYXk8eyBrZXk6IHN0cmluZywgdmFsdWU6IGFueSB9Pik6IFQgfSwgdG9rZW5zPyA6YW55W10pOlRcclxuICAgIHtcclxuICAgICAgICB0b2tlbnMgPSB0b2tlbnMgaW5zdGFuY2VvZiBBcnJheSA/IHRva2VucyA6IFt0b2tlbnNdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBrZXlWYWx1ZVBhaXJBcnJheSA9IElkZW50aXR5RmFjdG9yeS5HZW5lcmF0ZUtleVZhbHVlUGFpcih0b2tlbnMpOyBcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBsZXQgaWRlbnRpdHkgOklJZGVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgaWYodXNlck9yVXNlclR5cGUgPT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkZW50aXR5ID0gbmV3IElkZW50aXR5KGtleVZhbHVlUGFpckFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSWRlbnRpdHlGYWN0b3J5LmlzSUlkZW50aXR5KHVzZXJPclVzZXJUeXBlKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWRlbnRpdHkgPSB1c2VyT3JVc2VyVHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkZW50aXR5ID0gbmV3IHVzZXJPclVzZXJUeXBlKGtleVZhbHVlUGFpckFycmF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBrZXlWYWx1ZVBhaXJBcnJheS5mb3JFYWNoKChrZXlWYWx1ZVBhaXIpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZGVudGl0eS5DbGFpbXMucHVzaChrZXlWYWx1ZVBhaXIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gPFQ+aWRlbnRpdHk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgc3RhdGljIEdlbmVyYXRlS2V5VmFsdWVQYWlyKHRva2VucyA6YW55W10pOkFycmF5PHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkgfT5cclxuICAgIHtcclxuICAgICAgICB0b2tlbnMgPSB0b2tlbnMgaW5zdGFuY2VvZiBBcnJheSA/IHRva2VucyA6IFt0b2tlbnNdO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBsZXQga2V5VmFsdWVQYWlyQXJyYXkgOkFycmF5PHtrZXk6c3RyaW5nLHZhbHVlOmFueX0+ID0gbmV3IEFycmF5PHtrZXk6c3RyaW5nLHZhbHVlOmFueX0+KCk7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRva2Vucy5mb3JFYWNoKCh0b2tlbikgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgY2hhdmUgaW4gdG9rZW4pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHRva2VuLmhhc093blByb3BlcnR5KGNoYXZlKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsb3IgPSB0b2tlbltjaGF2ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vdm9JdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgOiBjaGF2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgOiB2YWxvclxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodG9rZW4gaW5zdGFuY2VvZiBBcnJheSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVZhbHVlUGFpckFycmF5LnB1c2goIHZhbG9yICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVZhbHVlUGFpckFycmF5LnB1c2goIG5vdm9JdGVtICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBrZXlWYWx1ZVBhaXJBcnJheTtcclxuICAgIH1cclxufVxyXG4iXX0=
