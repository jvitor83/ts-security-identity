"use strict";
/// <reference path='../../typings/main.d.ts' />
var SecurityContext_1 = require('../src/SecurityContext');
var SecurityContextTokenInitializer_1 = require('../src/SecurityContextTokenInitializer');
describe('SecurityContextTokenInitializer', function () {
    var accessToken = "{\"iss\":\"https://pjmtsts/\",\"aud\":\"https://pjmtsts/resources\",\"exp\":1462403582,\"nbf\":1462399982,\"client_id\":\"2380\",\"scope\":[\"openid\",\"profile\",\"pjmt_profile\",\"email\",\"permissao_2380\"],\"sub\":\"16843\",\"auth_time\":1462397042,\"idp\":\"idsrv\",\"permissao|2380:Dashboard\":\"Acesso\",\"permissao|2380:Dashboard.Graficos\":\"Acesso\",\"permissao|2380:Dashboard.Graficos.Diversos\":\"Acesso\",\"permissao|2380:Dashboard.Graficos.Sobre\":\"Acesso\",\"permissao|2380:Dashboard.Relatorio.RelatorioCriacao\":\"Acesso\",\"permissao|2380:Dashboard.Relatorios.RelatorioAcessos\":[\"Acesso\",\"Alterar\",\"Excluir\",\"Novo\"],\"permissao|2380:Home\":\"Acesso\",\"permissao|2380:Noticias\":\"Acesso\",\"permissao|2380:Relatorios\":\"Acesso\",\"amr\":[\"password\"]}";
    beforeEach(function () {
        SecurityContext_1.default.Reset();
    });
    it('Init should instantiate a User', function () {
        var json = JSON.parse(accessToken);
        var securityContextInitializer = new SecurityContextTokenInitializer_1.default(json);
        SecurityContext_1.default.Current.Init(securityContextInitializer);
        //SecurityContext.Current.User.permissoes.filter((permissao) => permissao.permissoes.some((perm) => perm == ""));
        //let name = SecurityContext.Current.Principal.Identity.Claims.filter((claim) => claim.key === "name")[0].value;
        expect(SecurityContext_1.default.Current.Principal).toBeDefined();
    });
    it('Init should have a User authenticated', function () {
        var json = JSON.parse(accessToken);
        var securityContextInitializer = new SecurityContextTokenInitializer_1.default(json);
        SecurityContext_1.default.Current.Init(securityContextInitializer);
        //SecurityContext.Current.User.permissoes.filter((permissao) => permissao.permissoes.some((perm) => perm == ""));
        expect(SecurityContext_1.default.Current.Principal.IsAuthenticated).toBeTruthy();
    });
    it('User should have client_id', function () {
        var json = JSON.parse(accessToken);
        var securityContextInitializer = new SecurityContextTokenInitializer_1.default(json);
        SecurityContext_1.default.Current.Init(securityContextInitializer);
        var client_id = SecurityContext_1.default.Current.Principal.Identity.findFirst('client_id');
        expect(client_id).toBe('2380');
    });
    it('User should not be authenticated', function () {
        expect(SecurityContext_1.default.Current.Principal.IsAuthenticated).toBe(false);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvU2VjdXJpdHlDb250ZXh0VG9rZW5Jbml0aWFsaXplci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnREFBZ0Q7QUFDaEQsZ0NBQTRCLHdCQUF3QixDQUFDLENBQUE7QUFFckQsZ0RBQTRDLHdDQUF3QyxDQUFDLENBQUE7QUFFckYsUUFBUSxDQUFDLGlDQUFpQyxFQUFFO0lBRXhDLElBQU0sV0FBVyxHQUFVLCt3QkFBMnJCLENBQUM7SUFFenRCLFVBQVUsQ0FBQztRQUNQLHlCQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuQyxJQUFJLDBCQUEwQixHQUFHLElBQUkseUNBQStCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0UseUJBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFekQsaUhBQWlIO1FBRWpILGdIQUFnSDtRQUVoSCxNQUFNLENBQUMseUJBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFNUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUU7UUFFeEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuQyxJQUFJLDBCQUEwQixHQUFHLElBQUkseUNBQStCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0UseUJBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFekQsaUhBQWlIO1FBRWpILE1BQU0sQ0FBQyx5QkFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFM0UsQ0FBQyxDQUFDLENBQUM7SUFHSCxFQUFFLENBQUMsNEJBQTRCLEVBQUU7UUFFN0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuQyxJQUFJLDBCQUEwQixHQUFHLElBQUkseUNBQStCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0UseUJBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFekQsSUFBSSxTQUFTLEdBQWMseUJBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVMsQ0FBQyxTQUFTLENBQVMsV0FBVyxDQUFDLENBQUM7UUFFdEcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVuQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUVuQyxNQUFNLENBQUMseUJBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUxRSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InNwZWMvU2VjdXJpdHlDb250ZXh0VG9rZW5Jbml0aWFsaXplci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vdHlwaW5ncy9tYWluLmQudHMnIC8+XHJcbmltcG9ydCBTZWN1cml0eUNvbnRleHQgZnJvbSAnLi4vc3JjL1NlY3VyaXR5Q29udGV4dCc7XHJcbmltcG9ydCBJZGVudGl0eSBmcm9tICcuLi9zcmMvSWRlbnRpdGllcy9JZGVudGl0eSc7XHJcbmltcG9ydCBTZWN1cml0eUNvbnRleHRUb2tlbkluaXRpYWxpemVyIGZyb20gJy4uL3NyYy9TZWN1cml0eUNvbnRleHRUb2tlbkluaXRpYWxpemVyJztcclxuXHJcbmRlc2NyaWJlKCdTZWN1cml0eUNvbnRleHRUb2tlbkluaXRpYWxpemVyJywgKCkgPT4ge1xyXG4gICAgXHJcbiAgICBjb25zdCBhY2Nlc3NUb2tlbjpzdHJpbmcgPSBge1wiaXNzXCI6XCJodHRwczovL3BqbXRzdHMvXCIsXCJhdWRcIjpcImh0dHBzOi8vcGptdHN0cy9yZXNvdXJjZXNcIixcImV4cFwiOjE0NjI0MDM1ODIsXCJuYmZcIjoxNDYyMzk5OTgyLFwiY2xpZW50X2lkXCI6XCIyMzgwXCIsXCJzY29wZVwiOltcIm9wZW5pZFwiLFwicHJvZmlsZVwiLFwicGptdF9wcm9maWxlXCIsXCJlbWFpbFwiLFwicGVybWlzc2FvXzIzODBcIl0sXCJzdWJcIjpcIjE2ODQzXCIsXCJhdXRoX3RpbWVcIjoxNDYyMzk3MDQyLFwiaWRwXCI6XCJpZHNydlwiLFwicGVybWlzc2FvfDIzODA6RGFzaGJvYXJkXCI6XCJBY2Vzc29cIixcInBlcm1pc3Nhb3wyMzgwOkRhc2hib2FyZC5HcmFmaWNvc1wiOlwiQWNlc3NvXCIsXCJwZXJtaXNzYW98MjM4MDpEYXNoYm9hcmQuR3JhZmljb3MuRGl2ZXJzb3NcIjpcIkFjZXNzb1wiLFwicGVybWlzc2FvfDIzODA6RGFzaGJvYXJkLkdyYWZpY29zLlNvYnJlXCI6XCJBY2Vzc29cIixcInBlcm1pc3Nhb3wyMzgwOkRhc2hib2FyZC5SZWxhdG9yaW8uUmVsYXRvcmlvQ3JpYWNhb1wiOlwiQWNlc3NvXCIsXCJwZXJtaXNzYW98MjM4MDpEYXNoYm9hcmQuUmVsYXRvcmlvcy5SZWxhdG9yaW9BY2Vzc29zXCI6W1wiQWNlc3NvXCIsXCJBbHRlcmFyXCIsXCJFeGNsdWlyXCIsXCJOb3ZvXCJdLFwicGVybWlzc2FvfDIzODA6SG9tZVwiOlwiQWNlc3NvXCIsXCJwZXJtaXNzYW98MjM4MDpOb3RpY2lhc1wiOlwiQWNlc3NvXCIsXCJwZXJtaXNzYW98MjM4MDpSZWxhdG9yaW9zXCI6XCJBY2Vzc29cIixcImFtclwiOltcInBhc3N3b3JkXCJdfWA7XHJcbiAgICBcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgU2VjdXJpdHlDb250ZXh0LlJlc2V0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnSW5pdCBzaG91bGQgaW5zdGFudGlhdGUgYSBVc2VyJywgKCkgPT4ge1xyXG4gICAgXHJcbiAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGFjY2Vzc1Rva2VuKTtcclxuICAgICAgICBsZXQgc2VjdXJpdHlDb250ZXh0SW5pdGlhbGl6ZXIgPSBuZXcgU2VjdXJpdHlDb250ZXh0VG9rZW5Jbml0aWFsaXplcihqc29uKTtcclxuICAgICAgICBTZWN1cml0eUNvbnRleHQuQ3VycmVudC5Jbml0KHNlY3VyaXR5Q29udGV4dEluaXRpYWxpemVyKTtcclxuICAgIFxyXG4gICAgICAgIC8vU2VjdXJpdHlDb250ZXh0LkN1cnJlbnQuVXNlci5wZXJtaXNzb2VzLmZpbHRlcigocGVybWlzc2FvKSA9PiBwZXJtaXNzYW8ucGVybWlzc29lcy5zb21lKChwZXJtKSA9PiBwZXJtID09IFwiXCIpKTtcclxuICAgICAgICBcclxuICAgICAgICAvL2xldCBuYW1lID0gU2VjdXJpdHlDb250ZXh0LkN1cnJlbnQuUHJpbmNpcGFsLklkZW50aXR5LkNsYWltcy5maWx0ZXIoKGNsYWltKSA9PiBjbGFpbS5rZXkgPT09IFwibmFtZVwiKVswXS52YWx1ZTtcclxuICAgIFxyXG4gICAgICAgIGV4cGVjdChTZWN1cml0eUNvbnRleHQuQ3VycmVudC5QcmluY2lwYWwpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpdCgnSW5pdCBzaG91bGQgaGF2ZSBhIFVzZXIgYXV0aGVudGljYXRlZCcsICgpID0+IHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIGxldCBzZWN1cml0eUNvbnRleHRJbml0aWFsaXplciA9IG5ldyBTZWN1cml0eUNvbnRleHRUb2tlbkluaXRpYWxpemVyKGpzb24pO1xyXG4gICAgICAgIFNlY3VyaXR5Q29udGV4dC5DdXJyZW50LkluaXQoc2VjdXJpdHlDb250ZXh0SW5pdGlhbGl6ZXIpO1xyXG4gICAgXHJcbiAgICAgICAgLy9TZWN1cml0eUNvbnRleHQuQ3VycmVudC5Vc2VyLnBlcm1pc3NvZXMuZmlsdGVyKChwZXJtaXNzYW8pID0+IHBlcm1pc3Nhby5wZXJtaXNzb2VzLnNvbWUoKHBlcm0pID0+IHBlcm0gPT0gXCJcIikpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGV4cGVjdChTZWN1cml0eUNvbnRleHQuQ3VycmVudC5QcmluY2lwYWwuSXNBdXRoZW50aWNhdGVkKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBcclxuICAgIGl0KCdVc2VyIHNob3VsZCBoYXZlIGNsaWVudF9pZCcsICgpID0+IHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIGxldCBzZWN1cml0eUNvbnRleHRJbml0aWFsaXplciA9IG5ldyBTZWN1cml0eUNvbnRleHRUb2tlbkluaXRpYWxpemVyKGpzb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFNlY3VyaXR5Q29udGV4dC5DdXJyZW50LkluaXQoc2VjdXJpdHlDb250ZXh0SW5pdGlhbGl6ZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjbGllbnRfaWQgPSAoPElkZW50aXR5PlNlY3VyaXR5Q29udGV4dC5DdXJyZW50LlByaW5jaXBhbC5JZGVudGl0eSkuZmluZEZpcnN0PHN0cmluZz4oJ2NsaWVudF9pZCcpO1xyXG4gICAgXHJcbiAgICAgICAgZXhwZWN0KGNsaWVudF9pZCkudG9CZSgnMjM4MCcpO1xyXG4gICAgICAgIFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGl0KCdVc2VyIHNob3VsZCBub3QgYmUgYXV0aGVudGljYXRlZCcsICgpID0+IHtcclxuICAgICAgICBcclxuICAgICAgICBleHBlY3QoU2VjdXJpdHlDb250ZXh0LkN1cnJlbnQuUHJpbmNpcGFsLklzQXV0aGVudGljYXRlZCkudG9CZShmYWxzZSk7XHJcbiAgICBcclxuICAgIH0pO1xyXG59KTtcclxuIl19
